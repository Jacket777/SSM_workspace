<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util
       https://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">



    <!--注册一个对象，spring回自动创建这个对象-->
    <!--
    一个bean标签就表示一个对象
    id:这个对象的唯一标识
    class:注册对象的完全限定名
    -->

    <bean id="person" class="com.msb.bean.Person">
        <!--使用property标签给对象的属性赋值
         name:表示属性的名称
         value：表示属性的值
        -->
        <property name="id" value="1"></property>
        <property name="name" value="zhangsan"></property>
        <property name="age" value="18"></property>
        <property name="gender" value="man"></property>
    </bean>

    <!--给person类添加构造方法-->
    <bean id="person2" class="com.msb.bean.Person">
        <constructor-arg name="id" value="1"></constructor-arg>
        <constructor-arg name="name" value="lisi"></constructor-arg>
        <constructor-arg name="age" value="20"></constructor-arg>
        <constructor-arg name="gender" value="woman"></constructor-arg>
    </bean>

    <!--在使用构造器赋值的时候可以省略name属性，但是此时就要求必须严格按照构造器参数的顺序来填写了-->
    <bean id="person3" class="com.msb.bean.Person">
        <constructor-arg value="1"></constructor-arg>
        <constructor-arg value="lisi"></constructor-arg>
        <constructor-arg value="20"></constructor-arg>
        <constructor-arg value="女"></constructor-arg>
    </bean>

    <!--如果想不按照顺序来添加参数值，那么可以搭配index属性来使用-->
    <bean id="person4" class="com.msb.bean.Person">
        <constructor-arg value="lisi" index="1"></constructor-arg>
        <constructor-arg value="1" index="0"></constructor-arg>
        <constructor-arg value="女" index="3"></constructor-arg>
        <constructor-arg value="20" index="2"></constructor-arg>
    </bean>

    <!--当有多个参数个数相同，不同类型的构造器的时候，可以通过type来强制类型-->
    <bean id="person5" class="com.msb.bean.Person">
        <constructor-arg value="1"></constructor-arg>
        <constructor-arg value="lisi5"></constructor-arg>
        <constructor-arg value="20" type="java.lang.Integer"></constructor-arg>
    </bean>


    <!--如果不修改为integer类型，那么需要type跟index组合使用-->
    <!--
    <bean id="person51" class="com.msb.bean.Person">
        <constructor-arg value="1"></constructor-arg>
        <constructor-arg value="lisi"></constructor-arg>
        <constructor-arg value="20" type="int" index="2"></constructor-arg>
    </bean>
    -->
    <!--
    通过命名空间为bean赋值，简化配置文件中属性声明的写法**
    -->
    <bean id="person6" class="com.msb.bean.Person" p:id="3" p:name="wangwu" p:age="22" p:gender="男"></bean>

    <!--给复杂类型的赋值都在property标签内进行-->
    <bean id="personA" class="com.msb.bean.PersonA">
        <property name="name">
            <!--赋空值-->
            <null></null>
        </property>
        <!--通过ref引用其他对象，引用外部bean-->
        <property name="address" ref="address"></property>
        <!--引用内部bean-->
        <!-- <property name="address">
             <bean class="com.mashibing.bean.Address">
                 <property name="province" value="北京"></property>
                 <property name="city" value="北京"></property>
                 <property name="town" value="西城区"></property>
             </bean>
         </property>-->
        <!--为list赋值-->
        <property name="books">
            <list>
                <!--内部bean-->
                <bean id="book1" class="com.msb.bean.Book">
                    <property name="name" value="高并发"></property>
                    <property name="author" value="马X"></property>
                    <property name="price" value="10"></property>
                </bean>
                <!--外部bean-->
                <ref bean="book2"></ref>
            </list>
        </property>


        <!--给map赋值-->
        <property name="maps" ref="myMap"></property>
        <!--给property赋值-->
        <property name="properties">
            <props>
                <prop key="aaa">aaa</prop>
                <prop key="bbb">222</prop>
            </props>
        </property>
        <!--给property赋值-->
        <property name="hobbies">
            <array>
                <value>book</value>
                <value>movie</value>
                <value>game</value>
            </array>
        </property>

        <!--给set赋值-->
        <property name="sets">
            <set>
                <value>111</value>
                <value>222</value>
                <value>333</value>
            </set>
        </property>

    </bean>

    <bean id="address" class="com.msb.bean.Address">
        <property name="province" value="河北"></property>
        <property name="city" value="邯郸"></property>
        <property name="town" value="武安"></property>
    </bean>



    <bean id="book2" class="com.msb.bean.Book">
        <property name="name" value="JVM"></property>
        <property name="author" value="马X"></property>
        <property name="price" value="120"></property>
    </bean>
    <!--级联属性-->
    <bean id="personA2" class="com.msb.bean.PersonA">
        <property name="address" ref ="address"></property>
        <property name="address.province" value="北京"></property>
    </bean>

    <!--util名称空间创建集合类型的bean-->
    <util:map id="myMap">
        <entry key="key1" value="value1"></entry>
        <entry key="key2" value-ref="book2"></entry>
        <entry key="key3">
            <bean class="com.msb.bean.Book">
                <property name="name" value="西游记"></property>
                <property name="author" value="吴承恩"></property>
                <property name="price" value="100"></property>
            </bean>
        </entry>

    </util:map>

    <bean id="person7" class="com.msb.bean.Person">
        <property name="id" value="1"></property>
        <property name="name" value="zhangsan"></property>
        <property name="age" value="21"></property>
        <property name="gender" value="男"></property>
    </bean>
    <!--parent:指定bean的配置信息继承于哪个bean-->
    <bean id="person8" class="com.msb.bean.Person" parent="person7">
        <property name="name" value="lisi8"></property>
    </bean>

    <!--如果想实现Java文件的抽象类，不需要将当前bean实例化的话，可以使用abstract属性-->
    <bean id="person9" class="com.msb.bean.Person" abstract="true">
        <property name="id" value="1"></property>
        <property name="name" value="zhangsan2"></property>
        <property name="age" value="21"></property>
        <property name="gender" value="男"></property>
    </bean>
    <!--parent:指定bean的配置信息继承于哪个bean-->
    <bean id="person10" class="com.msb.bean.Person" parent="person9">
        <property name="name" value="lisi9"></property>
    </bean>

    <!--bean对象在创建的时候是按照bean在配置文件的顺序决定的，也可以使用depend-on标签来决定顺序-->
    <bean id="book3" class="com.msb.bean.Book" depends-on="person,address"></bean>
    <!--
    <bean id="address3" class="com.msb.bean.Address"></bean>
    -->
    <bean id="person11" class="com.msb.bean.Person"></bean>

    <!--
       bean的作用域：singleton、prototype、request、session
       默认情况下是单例的
       prototype：多实例的
           容器启动的时候不会创建多实例bean，只有在获取对象的时候才会创建该对象
           每次创建都是一个新的对象
       singleton：默认的单例对象
           在容器启动完成之前就已经创建好对象
           获取的所有对象都是同一个
       -->
    <bean id="person12" class="com.msb.bean.Person" scope="prototype"></bean>



    <!--
     静态工厂的使用：
     class:指定静态工厂类
    factory-method:指定哪个方法是工厂方法
     -->
    <bean id="person13" class="com.msb.factory.PersonStaticFactory" factory-method="getPerson">
        <!--constructor-arg：可以为方法指定参数-->
        <constructor-arg value="lisi10"></constructor-arg>
    </bean>

    <bean id="personInstanceFactory" class="com.msb.factory.PersonInstanceFactory"></bean>

    <bean id="person14" class="com.msb.bean.Person" factory-bean="personInstanceFactory" factory-method="getPerson">
        <constructor-arg value="wangwu"></constructor-arg>
    </bean>

    <bean id="myfactorybean" class="com.msb.factory.MyFactoryBean"></bean>

    <!--
    <bean id="address4" class="com.msb.bean.Address" init-method="init" destroy-method="destroy"></bean>
    -->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/demo"></property>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
    </bean>

    <!--加载外部配置文件
        在加载外部依赖文件的时候需要context命名空间
    -->
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${username}"></property>
        <property name="password" value="${password}"></property>
        <property name="url" value="${url}"></property>
        <property name="driverClassName" value="${driverClassName}"></property>
    </bean>

</beans>